package org.usfirst.frc.team217.robot;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.*;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import java.lang.Math;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	//Joysticks
	Joystick oper, driver;
	Preferences prefs;
	
	//Joystick Variables
	final int buttonSquare = 1;
	final int buttonX = 2;
	final int buttonCircle = 3;
	final int buttonTriangle = 4;
	final int leftBumper = 5;
	final int rightBumper = 6;
	final int leftTrigger = 7;
	final int rightTrigger = 8;
	final int buttonShare = 9;
	final int buttonOption = 10;
	final int leftAnalog = 11;
	final int rightAnalog = 12;
	final int buttonPS = 13;
	final int touchpad = 14;
	
	
	double wheelRPM, hoodValue, flyP,flyI,flyD,flyF;
	
	//Drive Motors
	CANTalon rightMaster, rightSlave, leftMaster, leftSlave;
	
	//Shooting Motors
	CANTalon flyWheel, flyWheel2, hood, turret, lifter, kicker, intakeArm, wheelOfDoom;
	
	//Climbing Motors
	CANTalon climber, climber2;
	
	//Solenoids
	Solenoid backSolenoid, frontSolenoid, armSolenoid, gearSolenoid;
	
	//Gyro
	ADXRS450_Gyro horzGyro;
	
	//Compressor
	Compressor compressor;
	
	Preferences pref;
	
	AnalogInput hoodEnc;
	
	
	
	
	double intakeSpeed,robotSpeed;

	@Override
	public void robotInit() {
		
		pref = Preferences.getInstance();
		
		hoodEnc = new AnalogInput(0);
		
		//Joysticks
		driver = new Joystick(0);
		oper = new Joystick(1);
		
		//Drive Motors
		rightMaster = new CANTalon(15);
		rightMaster.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		
		rightSlave = new CANTalon(14);
		rightSlave.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		rightSlave.changeControlMode(TalonControlMode.Follower);
		rightSlave.set(15);
		
		leftMaster = new CANTalon(0);
		leftMaster.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		
		leftSlave = new CANTalon(1);
		leftSlave.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		leftSlave.changeControlMode(TalonControlMode.Follower);
		leftSlave.set(0);
		
		//Shooting Motors
		flyWheel = new CANTalon(10);
		flyWheel.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		flyWheel.reverseSensor(false);
		flyWheel2 = new CANTalon(11);
		flyWheel2.changeControlMode(TalonControlMode.Follower);
		flyWheel2.set(10);
		
		hood = new CANTalon(9);
		turret= new CANTalon(6);
		lifter = new CANTalon(5);
		kicker = new CANTalon(4);
		intakeArm =  new CANTalon(13);
		wheelOfDoom = new CANTalon(12);
		
		//flyWheel Settings
		flyWheel.configNominalOutputVoltage(+0.0f,  -0.0f);
		flyWheel.configPeakOutputVoltage(+12.0f, -12.0f);
		
		flyWheel.setProfile(0);  
		flyWheel.setP(flyP); //0.1
		flyWheel.setI(flyI); //0.0004895
		flyWheel.setD(flyD); //0.5
		flyWheel.setF(0);
		
		//Climbing Motors
		climber = new CANTalon(2);
		climber2 = new CANTalon(3);
		climber2.changeControlMode(TalonControlMode.Follower);
		climber2.set(2);
		
		
		//Solenoids
		frontSolenoid = new Solenoid(2);
		backSolenoid = new Solenoid(1);
		armSolenoid = new Solenoid(3);
		gearSolenoid = new Solenoid(0);
		
		//Gyro
	    horzGyro = new ADXRS450_Gyro();
	    
	    //Compressor
	    //compressor = new Compressor();
		
	    //Live Stream
	    /*
		new Thread(() -> {
            UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
            camera.setResolution(640, 480);
            
            CvSink cvSink = CameraServer.getInstance().getVideo();
            CvSource outputStream = CameraServer.getInstance().putVideo("cam0", 640, 480);
            
            Mat source = new Mat();
            Mat output = new Mat();
            
            while(true) {
                cvSink.grabFrame(source);
                Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
                outputStream.putFrame(output);
            }
        }).start();
        */
		smartDash();
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		flyWheel.setEncPosition(0);
		armSolenoid.set(true); //This deploys the arm at the start of the match.
		frontSolenoid.set(true);//This deploys omni if not already deployed.
		backSolenoid.set(true); // ^
		
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		
		
	}

	@Override
	public void teleopInit() {
		flyWheel.setEncPosition(0);
		rightMaster.setEncPosition(0);
		rightSlave.setEncPosition(0);
		leftMaster.setEncPosition(0);
		leftSlave.setEncPosition(0);
		//frontSolenoid.set(true); //This deploys omni if not already deployed.
		//backSolenoid.set(true);	 // ^
		//armSolenoid.set(true);   //Deploys arm if not already deployed.
	}
	
	@Override
	public void teleopPeriodic() {
		//System.out.println("rightMaster:  " + rightMaster.getEncPosition() + "leftMaster:  " + leftMaster.getEncPosition() + "rightSlave:  " + rightSlave.getEncPosition() + "leftSlave:  " + leftSlave.getEncPosition());
		if(driver.getRawButton(buttonPS)){
			climber.set(1);
		}else{
			climber.set(0);
		}
		System.out.println(hoodEnc.getValue());
		gearManipulator();
		shooter();
		hood();
		drivebase();
		smartDash();
		System.out.println("P: " + flyP + " I: " + flyI + " D: " + flyD+ " F: " +flyWheel.getF());
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
	
	
	void drivebase(){
		double speed = deadBand(-driver.getY());
		double turn = deadBand(-driver.getZ());
		
		leftMaster.set(robotSpeed*(-speed + turn));
		rightMaster.set(robotSpeed*(speed + turn));
		
		//Solenoids
		if(driver.getRawButton(leftBumper)){
			frontSolenoid.set(true); //omni
		}
		if(driver.getRawButton(leftTrigger)){
			backSolenoid.set(true);  //omni
		}
		if(driver.getRawButton(rightBumper)){
			frontSolenoid.set(false);//traction
		}
		if(driver.getRawButton(rightTrigger)){
			backSolenoid.set(false);//traction
		}
		/*
		if(oper.getRawButton(rightBumper)){
			armSolenoid.set(true);
		}
		if(oper.getRawButton(rightTrigger)){
			armSolenoid.set(false);
		}
	*/
		
	}
	
	double normPID(double target, double position, double pVal, double iVal){
		double PIDerror = target - position;
		double pOutput = (PIDerror*pVal);
		//double iOutput = (PIDerror*iVal);
		double speed = (pOutput);
		if(Math.abs(PIDerror) < 5){
			speed = 0;
		}
		
		return speed;
	}
	
	double deadBand(double joyStick){
		if(joyStick > -0.08 && joyStick < 0.08){
			joyStick = 0;
		}
		return joyStick;
	}
	
	double fGain(double rpm){
		double FGain;
		FGain = 1023/(4096*rpm/600);
		return FGain;
		
	}
	
	void hood(){
		
		if(oper.getRawButton(rightBumper)){
			hood.set(.3);
		}
		else{
			if(oper.getRawButton(rightTrigger)){
				hood.set(-.3);
			}
			else{
				hood.set(0);
			}
		}
		

		/*
		if(oper.getPOV() == 0){
			hood.set(normPID(800, hood.getEncPosition(), 0.00217, 0));
		}
		if(oper.getPOV() == 90){
			hood.set(normPID(1000, hood.getEncPosition(), 0.00217, 0));
		}
		if(oper.getPOV() == 180){
			hood.set(normPID(1200, hood.getEncPosition(), 0.00217, 0));
		}
		if(oper.getPOV() == 270){
			hood.set(normPID(1400, hood.getEncPosition(), 0.00217, 0));
		}
		*/
	}
	
	void shooter(){
		turret.set(-(deadBand(oper.getZ())));
		smartDash();
		//shooting
		double flyWheelRPM = wheelRPM;
		//System.out.println(flyWheel.getSpeed());
		flyWheel.setF(fGain(flyWheelRPM)/2);
		if(oper.getRawButton(buttonTriangle)){
			// I 7.5E-6
			// P .15
			// D .5
			flyWheel.changeControlMode(TalonControlMode.Speed);
			flyWheel.set(flyWheelRPM);

			lifter.set(-1);
			kicker.set(-1);
			smartDash();
			
		}else{
			flyWheel.changeControlMode(TalonControlMode.PercentVbus);
			flyWheel.set(0);
			lifter.set(0);
			kicker.set(0);
		}
		if(oper.getRawButton(buttonCircle)){
			wheelOfDoom.set(1);													
		}else{
			if(oper.getRawButton(buttonOption)){
				wheelOfDoom.set(-1);
			}else{
				wheelOfDoom.set(0);
			}
		}
		
		double intakeRollers;
		smartDash();
		intakeRollers = deadBand(oper.getY());
		intakeArm.set(intakeSpeed*intakeRollers);
			
		}	
	
	void gearManipulator(){
		if(oper.getRawButton(buttonSquare)){
			gearSolenoid.set(false);
		}
		if(oper.getRawButton(buttonX)){
			gearSolenoid.set(true);
		}
	}
	
	
	void smartDash(){
		//wheelRPM = prefs.getDouble("RPM", 0.0);
		//SmartDashboard.putString("DB/String 0", "RPM: ");
		//wheelRPM = Double.parseDouble(SmartDashboard.getString("DB/String 0", "0").substring(5));
		//System.out.println(wheelRPM);
		SmartDashboard.putNumber("Speed", flyWheel.getSpeed());
		
		flyP = pref.getDouble("P",0);
		flyI = pref.getDouble("I",0);
		flyD = pref.getDouble("D",0);
		flyF = pref.getDouble("F",0);
		
		intakeSpeed = pref.getDouble("Intake", 1);
		robotSpeed = pref.getDouble("Speed",1);
		wheelRPM = pref.getDouble("RPM", 3000);
		
		flyWheel.setP(flyP); //0.1
		flyWheel.setI(flyI); //0.0004895
		flyWheel.setD(flyD); //0.5
		flyWheel.setF(flyF);
	}

	
}
