package org.usfirst.frc.team217.robot;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends IterativeRobot {
	final String defaultAuto = "Default";
	final String customAuto = "My Auto";
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();
	CANTalon kicker, flyWheel1,flyWheel2,turretSpin,hood;
	Victor wheelOfDoom,elevator;
	Joystick driver;
	double wheelRPM, hoodValue, flyP,flyI,flyD,flyF,autoForwardLeft,autoForwardRight,visionKP;
	
	NetworkTable table;
	
	Preferences pref;

	boolean camNum = true;
	
	AnalogInput hoodEnc;

	@Override
	public void robotInit() {
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
		
		table = NetworkTable.getTable("SmartDashboard"); 
		table.putBoolean("Camera_Type", camNum);
		
		hoodEnc = new AnalogInput(0);
		
		wheelOfDoom = new Victor(0);
		elevator = new Victor(1);
		
		kicker = new CANTalon(4);
		flyWheel1 = new CANTalon(10);
		flyWheel1.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		flyWheel1.reverseSensor(true);
		flyWheel2 = new CANTalon(11);
		flyWheel2.changeControlMode(TalonControlMode.Follower);
		flyWheel2.set(10);
		
		flyWheel1.setProfile(0);  
		flyWheel1.setP(flyP); //0.1
		flyWheel1.setI(flyI); //0.0004895
		flyWheel1.setD(flyD); //0.5
		flyWheel1.setF(0);
		
		flyWheel1.configNominalOutputVoltage(+0.0f,  -0.0f);
		flyWheel1.configPeakOutputVoltage(+12.0f, -12.0f);
		
		flyWheel1.setProfile(0); 
		turretSpin = new CANTalon(6);
		hood = new CANTalon(9);
		hood.setFeedbackDevice(FeedbackDevice.AnalogEncoder);

		driver = new Joystick(0);
		
		pref = Preferences.getInstance();	
	}

	
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		switch (autoSelected) {
		case customAuto:
			// Put custom auto code here
			break;
		case defaultAuto:
		default:
			// Put default auto code here
			break;
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {

		flyWheel1.setF(fGain(wheelRPM));
		//System.out.println("COG_X: " + table.getNumber("COG_X",217) + " COG_Y: " + table.getNumber("COG_Y",217));
		if(driver.getRawButton(4)){
			flyWheel1.changeControlMode(TalonControlMode.Speed);
			flyWheel1.set(-wheelRPM);
			elevator.set(-1);
			kicker.set(-1);
		}
		else{
			flyWheel1.changeControlMode(TalonControlMode.PercentVbus);
			flyWheel1.set(0);
			elevator.set(0);
			kicker.set(0);
		}
		if(driver.getRawButton(3)){
			wheelOfDoom.set(-1);
		}
		else{
			if(driver.getRawButton(2)){
				wheelOfDoom.set(1);
			}
			else{
				wheelOfDoom.set(0);
			}
		}
		if(driver.getRawButton(5)){
			camNum = true;
		}
		
		turretSpin.set(deadBand(driver.getZ()));
		if(driver.getPOV() == 0){
			hood.set(-hoodPID(3500,hoodEnc.getValue()));
		}
		
		if(driver.getRawButton(6)){
			hood.set(.95);
		}
		else{
			if(driver.getRawButton(8)){
				hood.set(-.95);
			}
			
			else{
				hood.set(0);
			}
		}
		System.out.println("Hood: " + hood.getEncPosition());
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
	
	double deadBand(double joyStick){
		if(joyStick > -0.08 && joyStick < 0.08){
			joyStick = 0;
		}
		return joyStick;
	}
	
	void smartDash(){
		SmartDashboard.putNumber("COG_X", table.getNumber("COG_X",217));
		SmartDashboard.putNumber("COG_Y", table.getNumber("COG_Y",217));
		SmartDashboard.putNumber("Speed", flyWheel1.getSpeed());

		
		flyP = pref.getDouble("P",0.035);
		flyI = pref.getDouble("I",0.0000376);
		flyD = pref.getDouble("D",0.35);
		
		
		
		wheelRPM = pref.getDouble("RPM", 3240);
		hoodValue = pref.getDouble("Hood", 650);
		visionKP = pref.getDouble("VisionP", 0.00217);
		
		
		
		flyWheel1.setP(flyP); //0.1
		flyWheel1.setI(flyI); //0.0004895
		flyWheel1.setD(flyD); //0.5
		flyWheel1.setF(fGain(wheelRPM));
		System.out.println(flyWheel1.getF());
	}
	
	double fGain(double rpm){
		double FGain;
		FGain = 1023/(4096*rpm/600);
		return FGain;
		
	}
	
	double hoodPID(double target, double position){
		double error = target - position;
		double speed = error * 0.07;
		System.out.println("Hood Position: " +hoodEnc.getValue() + "Error "+ error + " Speed: " + speed );

		
		return speed;
	}
}

