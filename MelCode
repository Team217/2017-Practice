package org.usfirst.frc.team217.robot;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANSpeedController.ControlMode;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;
import com.ctre.*;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import java.lang.Math;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	//Joysticks
	Joystick oper, driver;
	
	//Drive Motors
	CANTalon rightMaster, rightSlave, leftMaster, leftSlave;
	
	//Shooting Motors
	CANTalon flyWheel, flyWheel2, hood, turret, elevator, kicker, intakeArm, wheelOfDoom;
	
	//Climbing Motors
	CANTalon climber, climber2;
	
	//Solenoids
	Solenoid backSolenoid, frontSolenoid, armSolenoid, gearSolenoid;
	
	//Gyro
	ADXRS450_Gyro horzGyro;

	@Override
	public void robotInit() {
		
		//Joysticks
		driver = new Joystick(0);
		oper = new Joystick(1);
		
		//Drive Motors
		rightMaster = new CANTalon(0);
		rightSlave = new CANTalon(15);
		rightSlave.changeControlMode(TalonControlMode.Follower);
		rightSlave.set(0);
		leftMaster = new CANTalon(1);
		leftSlave = new CANTalon(14);
		leftSlave.changeControlMode(TalonControlMode.Follower);
		leftSlave.set(1);
		
		//Shooting Motors
		flyWheel = new CANTalon(10);
		flyWheel.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		flyWheel.reverseSensor(true);
		flyWheel2 = new CANTalon(9);
		flyWheel2.changeControlMode(TalonControlMode.Follower);
		flyWheel2.set(10);
		
		hood = new CANTalon(11);
		turret= new CANTalon(6);
		elevator = new CANTalon(5);
		kicker = new CANTalon(4);
		intakeArm =  new CANTalon(13);
		wheelOfDoom = new CANTalon(12);
		
		//flyWheel Settings
		flyWheel.configNominalOutputVoltage(+0.0f,  -0.0f);
		flyWheel.configPeakOutputVoltage(+12.0f, -12.0f);
		
		flyWheel.setProfile(0);
		flyWheel.setF(0);  
		flyWheel.setD(0); //0.5
		flyWheel.setI(0); //0.0004895
		flyWheel.setP(0); //0.10
		
		//Climbing Motors
		climber = new CANTalon(2);
		climber2 = new CANTalon(3);
		climber2.changeControlMode(TalonControlMode.Follower);
		climber2.set(2);
		
		
		//Solenoids
		frontSolenoid = new Solenoid(0);
		backSolenoid = new Solenoid(1);
		armSolenoid = new Solenoid(3);
		gearSolenoid = new Solenoid(2);
		
		//Gyro
	    horzGyro = new ADXRS450_Gyro();
		
		
		
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		flyWheel.setEncPosition(0);
		armSolenoid.set(true);
		
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		
		
	}

	@Override
	public void teleopInit() {
		flyWheel.setEncPosition(0);
		frontSolenoid.set(false);
		backSolenoid.set(false);
		armSolenoid.set(true);
		
		
	}
	
	@Override
	public void teleopPeriodic() {

		shooter();
		hood();
		drivebase();
		
	}


	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
	
	
	void drivebase(){
		double speed = deadBand(-driver.getY());
		double turn = deadBand(driver.getZ());
		
		leftMaster.set(speed + turn);
		rightMaster.set(-speed + turn);
		
		//Solenoids
		if(driver.getRawButton(5)){
			frontSolenoid.set(false);
		}
		if(driver.getRawButton(7)){
			backSolenoid.set(false);
		}
		if(driver.getRawButton(6)){
			frontSolenoid.set(true);
		}
		if(driver.getRawButton(8)){
			backSolenoid.set(true);
		}
		
		
	}
	
	double normPID(double target, double position, double pVal, double iVal){
		double PIDerror = target - position;
		double pOutput = (PIDerror*pVal);
		double iOutput = (PIDerror*iVal);
		double speed = (pOutput + iOutput);
		if(Math.abs(PIDerror) < 5){
			speed = 0;
		}
		
		return speed;
	}
	
	double deadBand(double joyStick){
		if(joyStick > -0.08 && joyStick < 0.08){
			joyStick = 0;
		}
		return joyStick;
	}
	
	double fGain(double rpm){
		double FGain;
		FGain = 1023/(4096*rpm/600);
		return FGain;
		
	}
	
	void hood(){

		if(oper.getPOV() == 0){
			hood.set(normPID(800, hood.getEncPosition(), 0.00217, 0));
		}
		if(oper.getPOV() == 90){
			hood.set(normPID(1000, hood.getEncPosition(), 0.00217, 0));
		}
		if(oper.getPOV() == 180){
			hood.set(normPID(1200, hood.getEncPosition(), 0.00217, 0));
		}
		if(oper.getPOV() == 270){
			hood.set(normPID(1400, hood.getEncPosition(), 0.00217, 0));
		}
	}
	
	void shooter(){
		//shooting
		double flyWheelRPM = -2000;
		System.out.println(flyWheel.getSpeed());
		flyWheel.setF(fGain(flyWheelRPM));
		if(oper.getRawButton(5)){
			flyWheel.changeControlMode(TalonControlMode.Speed);
			flyWheel.set(flyWheelRPM);	
			elevator.set(1);
			kicker.set(1);
		}else{
			flyWheel.changeControlMode(TalonControlMode.PercentVbus);
			flyWheel.set(0);
			elevator.set(0);
			kicker.set(0);
		}
		if(oper.getRawButton(6)){
			wheelOfDoom.set(1);
		}else{
			wheelOfDoom.set(0);
		}
	}	
}

