package org.usfirst.frc.team217.robot;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.*;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import java.lang.Math;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String redSide = "Red Auto";
	final String blueSide = "Blue Auto";
	final String ballsOut = "40 Ball Auto";
	final String gearShoot = "Gear and Shoot Auto";
	final String pos1 = "Position 1";
	final String pos2 = "Position 2";
	final String pos3 = "Position 3";
	
	String sideSelected, autoSelected, positionSelected;
	
	//Joysticks
	Joystick oper, driver,gearTest;
	Preferences prefs;
	
	//Joystick Variables
	final int buttonSquare = 1;
	final int buttonX = 2;
	final int buttonCircle = 3;
	final int buttonTriangle = 4;
	final int leftBumper = 5;
	final int rightBumper = 6;
	final int leftTrigger = 7;
	final int rightTrigger = 8;
	final int buttonShare = 9;
	final int buttonOption = 10;
	final int leftAnalog = 11;
	final int rightAnalog = 12;
	final int buttonPS = 13;
	final int touchpad = 14;
	
	
	double wheelRPM, hoodValue, flyP,flyI,flyD,flyF,autoForwardLeft,autoForwardRight;
	
	//Drive Motors
	CANTalon rightMaster, rightSlave, leftMaster, leftSlave;
	
	//Shooting Motors
	CANTalon flyWheel, flyWheel2, hood, turret, lifter, kicker, intakeArm, wheelOfDoom;
	
	//Climbing Motors
	CANTalon climber, climber2;
	
	//Gear Motors
	CANTalon gearArm, gearIntake;
	
	//Solenoids
	Solenoid backSolenoid, frontSolenoid, armSolenoid, gearSolenoid;
	
	//Gyro
	ADXRS450_Gyro horzGyro;
	
	//Compressor
	Compressor compressor;
	
	Preferences pref;
	
	AnalogInput hoodEnc;
	
	NetworkTable table;
	Timer autoTime,turretTime;
	
	double intakeSpeed,robotSpeed,visionKP,autoP;
	boolean camNum = false,autonEncReset = true;
	
	enum BallsOut{
		reset,
		forward,
		turn,
		tacticalReload,
		stopAndShoot
	};
	BallsOut ballsOutAuton;
	
	enum TurretTest{
		spin,
		weMadeIt
	}
	TurretTest turretAuto;
	
	SendableChooser<String> side = new SendableChooser<>();
	SendableChooser<String> auton = new SendableChooser<>();
	SendableChooser<String> position = new SendableChooser<>();

	@Override
	public void robotInit() {
		
		side.addDefault("Red Alliance", redSide);
		side.addObject("Blue Alliance", blueSide);
		SmartDashboard.putData("Auton Side Selection", side);
		
		auton.addDefault("40 Ball", ballsOut);
		auton.addObject("10 Ball Gear Auto", gearShoot);
		SmartDashboard.putData("Auton Selection",auton);
		
		position.addDefault("Position 1", pos1);	
		position.addObject("Position 2", pos2);
		position.addObject("Position 3", pos3);
		SmartDashboard.putData("Position Selection",position);
		
		
		pref = Preferences.getInstance();
		
		hoodEnc = new AnalogInput(1);
		
		autoTime = new Timer();
		turretTime = new Timer();
		
		//Gear Manipulator
		gearArm = new CANTalon(8);
		gearArm.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		
		gearIntake = new CANTalon(7);
		
		//Joysticks
		driver = new Joystick(0);
		oper = new Joystick(1);
		gearTest = new Joystick(2);
		
		//Drive Motors
		rightMaster = new CANTalon(15);
		rightMaster.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		
		rightSlave = new CANTalon(14);
		rightSlave.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		rightSlave.changeControlMode(TalonControlMode.Follower);
		rightSlave.set(15);
		
		leftMaster = new CANTalon(0);
		leftMaster.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		
		leftSlave = new CANTalon(1);
		leftSlave.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		leftSlave.changeControlMode(TalonControlMode.Follower);
		leftSlave.set(0);
		
		//Shooting Motors
		flyWheel = new CANTalon(10);
		flyWheel.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		flyWheel.reverseSensor(false);
		flyWheel2 = new CANTalon(11);
		flyWheel2.changeControlMode(TalonControlMode.Follower);
		flyWheel2.set(10);
		
		hood = new CANTalon(9);
		turret= new CANTalon(6);
		turret.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		lifter = new CANTalon(5);
		kicker = new CANTalon(4);
		intakeArm =  new CANTalon(13);
		wheelOfDoom = new CANTalon(12);
		
		//flyWheel Settings
		flyWheel.configNominalOutputVoltage(+0.0f,  -0.0f);
		flyWheel.configPeakOutputVoltage(+12.0f, -12.0f);
		
		flyWheel.setProfile(0);  
		flyWheel.setP(flyP); //0.1
		flyWheel.setI(flyI); //0.0004895
		flyWheel.setD(flyD); //0.5
		flyWheel.setF(0);
		
		//Climbing Motors
		climber = new CANTalon(2);
		climber2 = new CANTalon(3);
		climber2.changeControlMode(TalonControlMode.Follower);
		climber2.set(2);
		
		
		//Solenoids
		frontSolenoid = new Solenoid(2);
		backSolenoid = new Solenoid(1);
		armSolenoid = new Solenoid(3);
		gearSolenoid = new Solenoid(0);
		
		//Gyro
	    horzGyro = new ADXRS450_Gyro();
	    
	    table = NetworkTable.getTable("SmartDashboard"); 
		table.putBoolean("Camera_Type", camNum);
	   
		UsbCamera camera1;
	    camera1 = CameraServer.getInstance().startAutomaticCapture();
	    camera1.setResolution(320, 240);
	    camera1.setFPS(30);
	    
		smartDash();
	}

	@Override
	public void autonomousInit() {
		
		sideSelected = side.getSelected();
		autoSelected = auton.getSelected();		
		positionSelected = position.getSelected();
		
		turret.setEncPosition(0);
		flyWheel.setEncPosition(0);
		//armSolenoid.set(true); //This deploys the arm at the start of the match.
		frontSolenoid.set(true);//This deploys omni if not already deployed.
		backSolenoid.set(false); // ^
		smartDash();
		turretTime.start();
		
		ballsOutAuton = BallsOut.reset;
		
	}

	@Override
	public void autonomousPeriodic() {
		switch(sideSelected){
			case redSide:
				switch(autoSelected){
					case ballsOut:
						break;
					case gearShoot:
						break;
				}
				break;
			case blueSide:
				switch(autoSelected){
					case ballsOut:
						break;
					case gearShoot:
						break;
				}
				break;
		}
		switch(ballsOutAuton){
		case reset:
			rightMaster.setEncPosition(0);
			rightSlave.setEncPosition(0);
			leftMaster.setEncPosition(0);
			leftSlave.setEncPosition(0);
			turret.setEncPosition(0);
			horzGyro.reset();
			if(leftMaster.getEncPosition() == 0){
				ballsOutAuton = BallsOut.forward;
			}
			break;
		case forward:
			turret.set(-normPID(8350,turret.getEncPosition(),0.0011,0));
			leftMaster.set(-normPID(-2391,leftMaster.getEncPosition(),0.00217,0));
			rightMaster.set(-normPID(2484,rightMaster.getEncPosition(),0.00217,0));
			System.out.println("Front Left: " + leftMaster.getEncPosition() + " Front Right: " + rightMaster.getEncPosition() + " Back Left: " + leftSlave.getEncPosition() + " Back Right: " + rightSlave.getEncPosition() + " Gyro: "+ horzGyro.getAngle());
			
			flyWheel.changeControlMode(TalonControlMode.Speed);
			flyWheel.set(2175);

			lifter.set(-1);
			kicker.set(-1);
			
			if(leftMaster.getEncPosition() <= -2385 && rightMaster.getEncPosition() >= 2480){
				leftMaster.set(0);
				rightMaster.set(0);
				rightMaster.setEncPosition(0);
				rightSlave.setEncPosition(0);
				leftMaster.setEncPosition(0);
				leftSlave.setEncPosition(0);
				
				ballsOutAuton = BallsOut.turn;
			}

			break;
		case turn:
				leftMaster.set(-normPID(90,horzGyro.getAngle(),autoP,0));
				rightMaster.set(-normPID(90,horzGyro.getAngle(),autoP,0));
				System.out.println("WE MADE IT TO TURN" + "Gyro: " + horzGyro.getAngle());
				flyWheel.changeControlMode(TalonControlMode.Speed);
				flyWheel.set(2175);
				
				
				if(horzGyro.getAngle() >= 87){
					leftMaster.set(0);
					rightMaster.set(0);
					rightMaster.setEncPosition(0);
					rightSlave.setEncPosition(0);
					leftMaster.setEncPosition(0);
					leftSlave.setEncPosition(0);
					System.out.println("Front Left: " + leftMaster.getEncPosition() + " Front Right: " + rightMaster.getEncPosition() + " Back Left: " + leftSlave.getEncPosition() + " Back Right: " + rightSlave.getEncPosition() + " Gyro: "+ horzGyro.getAngle());
					autoTime.start();

					ballsOutAuton = BallsOut.tacticalReload;
				}

			 break;
		case tacticalReload:
			/*
			if(autonEncReset){
				rightMaster.setEncPosition(0);
				rightSlave.setEncPosition(0);
				leftMaster.setEncPosition(0);
				leftSlave.setEncPosition(0);
				
				System.out.println("Front Left: " + leftMaster.getEncPosition() + " Front Right: " + rightMaster.getEncPosition() + " Back Left: " + leftSlave.getEncPosition() + " Back Right: " + rightSlave.getEncPosition() + " Gyro: "+ horzGyro.getAngle());

				autonEncReset= false;
			}
			*/
			flyWheel.changeControlMode(TalonControlMode.Speed);
			flyWheel.set(2175);
			System.out.println("TACTICAL RELOAD");
			
			System.out.println("Front Left: " + leftMaster.getEncPosition() + " Front Right: " + rightMaster.getEncPosition() + " Back Left: " + leftSlave.getEncPosition() + " Back Right: " + rightSlave.getEncPosition() + " Gyro: "+ horzGyro.getAngle());

			//leftMaster.set(-normPID(2561,leftMaster.getEncPosition(),0.00217,0));
			//rightMaster.set(-normPID(-2654,rightMaster.getEncPosition(),0.00217,0));
			
			leftMaster.set(.8);
			rightMaster.set(-.8);
			turret.set(-normPID(8350,turret.getEncPosition(),0.0011,0));

			System.out.println("Front Left: " + leftMaster.getEncPosition() + " Front Right: " + rightMaster.getEncPosition() + " Back Left: " + leftSlave.getEncPosition() + " Back Right: " + rightSlave.getEncPosition() + " Gyro: "+ horzGyro.getAngle());

			if(autoTime.get() >= .9 && turret.getEncPosition() >= 8300){
				leftMaster.set(0);
				rightMaster.set(0);
				turret.set(0);
				ballsOutAuton = BallsOut.stopAndShoot;
			}
			break;
		case stopAndShoot:
			leftMaster.set(.2);//flip for other side this is for red alliance
			rightMaster.set(-.2);
			turret.set(-normPID(8375,turret.getEncPosition(),0.0011,0));

			wheelOfDoom.set(1);
			flyWheel.changeControlMode(TalonControlMode.Speed);
			flyWheel.set(2175);
			/*
			
			if(table.getNumber("COG_X",0) == 0 && autoTime.get() > 1.6 && autoTime.get() <= 1.8){
				turret.set(.1);
			}else{
				if(autoTime.get() > 1.2 && autoTime.get() <= 10.0){
				turret.set(visionPID(175,table.getNumber("COG_X",0),visionKP));
				}
				else{
					turret.set(0);
				}
			}
			*/
			break;	
	}
		
	
		
		
	}

	@Override
	public void teleopInit() {
		flyWheel.setEncPosition(0);
		rightMaster.setEncPosition(0);
		rightSlave.setEncPosition(0);
		leftMaster.setEncPosition(0);
		leftSlave.setEncPosition(0);
		//frontSolenoid.set(true); //This deploys omni if not already deployed.
		//backSolenoid.set(true);	 // ^
		//armSolenoid.set(true);   //Deploys arm if not already deployed.
		
	}
	
	@Override
	public void teleopPeriodic() {
		//System.out.println("rightMaster:  " + rightMaster.getEncPosition() + "leftMaster:  " + leftMaster.getEncPosition() + "rightSlave:  " + rightSlave.getEncPosition() + "leftSlave:  " + leftSlave.getEncPosition());
		if(driver.getRawButton(leftTrigger)){
			climber.set(1);
		}else{
			if(driver.getRawButton(rightTrigger))
			climber.set(-1);
			else{
				climber.set(0);
			}
		}
		System.out.println("Turret Enc: "+ turret.getEncPosition());
		gearManipulator();
		shooter();
		hood();
		drivebase();
		smartDash();
	
		//System.out.println("Front Left: " + leftMaster.getEncPosition() + " Front Right: " + rightMaster.getEncPosition() + " Back Left: " + leftSlave.getEncPosition() + " Back Right: " + rightSlave.getEncPosition() + " Gyro: "+ horzGyro.getAngle());
		//System.out.println("P: " + flyP + " I: " + flyI + " D: " + flyD+ " F: " +flyWheel.getF());
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
	
	
	void drivebase(){
		double speed = deadBand(-driver.getY());
		double turn = deadBand(-driver.getZ());
		
		leftMaster.set(robotSpeed*(-speed + turn));
		rightMaster.set(robotSpeed*(speed + turn));
		
		
		
		//Solenoids
		if(driver.getRawButton(leftBumper)){
			frontSolenoid.set(true); //omni
			backSolenoid.set(true);  //omni
		}
		
		if(driver.getRawButton(rightBumper)){
			frontSolenoid.set(false);//traction
			backSolenoid.set(false);//traction
		}
		
		
		
		if(driver.getRawButton(1)){
			rightMaster.setEncPosition(0);
			rightSlave.setEncPosition(0);
			leftMaster.setEncPosition(0);
			leftSlave.setEncPosition(0);
		}
	
		
	}
	
	
	void hood(){
		//System.out.println("Hood Position: " +hoodEnc.getValue());
		
		
		if(oper.getPOV() == 0){
			hood.set(-hoodPID(500,hoodEnc.getValue()));
		}
		if(oper.getRawButton(rightBumper)){
			hood.set(.5);
		}
		else{
			if(oper.getRawButton(rightTrigger)){
				hood.set(-.5);
			}
			else{
				hood.set(0);
			}
		}
	
	}
	
	
	void shooter(){
		if(oper.getRawButton(buttonOption)){
			turret.set(.5);
		}
		else{
			if(oper.getRawButton(buttonShare)){
				turret.set(-.5);
			}
			else{
				turret.set(0);
			}
		}
		
		
		intakeArm.set(-(deadBand(oper.getRawAxis(5))));
		smartDash();
		//shooting
		double flyWheelRPM = wheelRPM;
		//System.out.println(flyWheel.getSpeed());
		//flyWheel.setF(fGain(flyWheelRPM));
		if(oper.getRawButton(buttonTriangle)){
			// I 7.5E-6
			// P .15
			// D .5
			flyWheel.changeControlMode(TalonControlMode.Speed);
			flyWheel.set(flyWheelRPM);

			lifter.set(-1);
			kicker.set(-1);
			smartDash();
			
		}else{
			flyWheel.changeControlMode(TalonControlMode.PercentVbus);
			flyWheel.set(0);
			lifter.set(0);
			kicker.set(0);
		}
		if(oper.getRawButton(buttonCircle)){
			wheelOfDoom.set(1);													
		}else{
			if(oper.getRawButton(rightAnalog)){
				wheelOfDoom.set(-1);
			}else{
				wheelOfDoom.set(0);
			}
		}
		
		
		smartDash();
		
		
		if(oper.getRawButton(touchpad)){
			turret.set(visionPID(175,table.getNumber("COG_X",0),visionKP));
		}
			
		}	
	
	void gearManipulator(){
		
		if(oper.getRawButton(buttonSquare)){ //up position for gear arm
			gearArm.set(-normPID(1200,gearArm.getEncPosition(),0.00049,0));
		}
		else{
			if(oper.getRawButton(buttonX)){ //deliver position for gear arm
				gearArm.set(-normPID(977,gearArm.getEncPosition(),0.00049,0));
			}
			else{
				if(gearArm.getEncPosition() >= 1400){ 
					gearArm.set(-normPID(1350,gearArm.getEncPosition(),0.00317,0));
				}
				else{
					gearArm.set(0.4*deadBand(oper.getY())); //left stick operator
				}
			}
		}
		if(oper.getRawButton(leftBumper)){
			gearIntake.set(-.75);
		}
		else{
			if(oper.getRawButton(leftTrigger)){
				gearIntake.set(.75);
			}
			else{
				gearIntake.set(0);
			}
		}
		if(oper.getRawButton(buttonPS)){
			gearArm.setEncPosition(0);
			turret.setEncPosition(0);
		}
	}
	double visionPID(double target,double position,double kP){
		double error = target - position;
		double speed = error *kP;
		return speed;
		
	}
	
	void smartDash(){
		
		SmartDashboard.putNumber("Speed", flyWheel.getSpeed());
		SmartDashboard.putNumber("COG_X", table.getNumber("COG_X",217));
		SmartDashboard.putNumber("COG_Y", table.getNumber("COG_Y",217));
		SmartDashboard.putNumber("Gear Arm Encoder", gearArm.getEncPosition());
		SmartDashboard.putNumber("Hood Encoder", hoodEnc.getValue());
		SmartDashboard.putNumber("Gyro Angle", horzGyro.getAngle());
		SmartDashboard.putNumber("Front Left Encoder", leftMaster.getEncPosition());
		SmartDashboard.putNumber("Back Left Encoder", leftSlave.getEncPosition());
		SmartDashboard.putNumber("Front Right Encoder", rightMaster.getEncPosition());
		SmartDashboard.putNumber("Back Right Encoder", rightSlave.getEncPosition());
		SmartDashboard.putNumber("Gear Arm Current Draw", gearArm.getOutputCurrent());
		SmartDashboard.putNumber("Gear Arm Voltage Draw", gearArm.getOutputVoltage());
		SmartDashboard.putNumber("Turret Spin Encoder", turret.getEncPosition());
		SmartDashboard.putNumber("Gear Intake Current", gearIntake.getOutputCurrent());
		SmartDashboard.putNumber("Turret Current", turret.getOutputCurrent());
		SmartDashboard.putNumber("Climber Current", climber.getOutputCurrent());
		SmartDashboard.putNumber("Front Left Current", leftMaster.getOutputCurrent());
		SmartDashboard.putNumber("Front Right Current", rightMaster.getOutputCurrent());

		SmartDashboard.putNumber("Back Left Current	", leftSlave.getOutputCurrent());

		SmartDashboard.putNumber("Back Right Current", rightSlave.getOutputCurrent());

		
		flyP = pref.getDouble("P",0.008);
		flyI = pref.getDouble("I",0.000023);
		flyD = pref.getDouble("D",0.07);
		flyF = pref.getDouble("F",0.0299071);
		
		intakeSpeed = pref.getDouble("Intake", 1);
		robotSpeed = pref.getDouble("Speed",1);
		wheelRPM = pref.getDouble("RPM", 3240);
		//System.out.println(wheelRPM);
		hoodValue = pref.getDouble("Hood", 650);
		visionKP = pref.getDouble("VisionP", 0.00217);
		autoP = pref.getDouble("AutonGyroP", 0.00217);
		
		autoForwardLeft = pref.getDouble("ForwardLeft", 27);
		autoForwardRight = pref.getDouble("ForwardRight", 27);
		
		
		flyWheel.setP(flyP); //0.1
		flyWheel.setI(flyI); //0.0004895
		flyWheel.setD(flyD); //0.5
		flyWheel.setF(flyF);
	}
	
	void autoSmartDash(){
		flyP = pref.getDouble("P",0.035);
		flyI = pref.getDouble("I",0.0000376);
		flyD = pref.getDouble("D",0.35);
		
		flyWheel.setP(flyP); //0.1
		flyWheel.setI(flyI); //0.0004895
		flyWheel.setD(flyD); //0.5
		
		visionKP = pref.getDouble("VisionP", 0.00217);
		autoP = pref.getDouble("AutonGyroP", 0.00217);
		
	}
	double normPID(double target, double position, double pVal, double iVal){
		double PIDerror = target - position;
		double pOutput = (PIDerror*pVal);
		//double iOutput = (PIDerror*iVal);
		double speed = (pOutput);
		if(Math.abs(PIDerror) < 5){
			speed = 0;
		}
		
		return speed;
	}
	
	double deadBand(double joyStick){
		if(joyStick > -0.08 && joyStick < 0.08){
			joyStick = 0;
		}
		return joyStick;
	}
	
	double fGain(double rpm){
		double FGain;
		FGain = 1023/(4096*rpm/600);
		return FGain;
		
	}
	double hoodPID(double target, double position){
		double error = target - position;
		double speed = error * 0.17;
		
		if(speed < 0.5 && error >10){
			speed*=2;
		}
		if(speed > 1){
			speed = 1;
		}
		
		return speed;
	}
	
	
}